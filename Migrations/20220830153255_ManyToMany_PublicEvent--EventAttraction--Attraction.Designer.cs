// <auto-generated />
using DAW.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAW.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220830153255_ManyToMany_PublicEvent--EventAttraction--Attraction")]
    partial class ManyToMany_PublicEventEventAttractionAttraction
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAW.Entities.Adress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("DAW.Entities.Attraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descriere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Attractions");
                });

            modelBuilder.Entity("DAW.Entities.EventAttraction", b =>
                {
                    b.Property<int>("PublicEventId")
                        .HasColumnType("int");

                    b.Property<int>("AttractionId")
                        .HasColumnType("int");

                    b.HasKey("PublicEventId", "AttractionId");

                    b.HasIndex("AttractionId");

                    b.ToTable("EventAttractions");
                });

            modelBuilder.Entity("DAW.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdressId")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DAW.Entities.PublicEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketPrice")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("PublicEvents");
                });

            modelBuilder.Entity("DAW.Entities.EventAttraction", b =>
                {
                    b.HasOne("DAW.Entities.Attraction", "Attraction")
                        .WithMany("EventAttractions")
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAW.Entities.PublicEvent", "PublicEvent")
                        .WithMany("EventAttractions")
                        .HasForeignKey("PublicEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("PublicEvent");
                });

            modelBuilder.Entity("DAW.Entities.Location", b =>
                {
                    b.HasOne("DAW.Entities.Adress", "Adress")
                        .WithOne("Location")
                        .HasForeignKey("DAW.Entities.Location", "AdressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adress");
                });

            modelBuilder.Entity("DAW.Entities.PublicEvent", b =>
                {
                    b.HasOne("DAW.Entities.Location", "Location")
                        .WithMany("PublicEvents")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DAW.Entities.Adress", b =>
                {
                    b.Navigation("Location");
                });

            modelBuilder.Entity("DAW.Entities.Attraction", b =>
                {
                    b.Navigation("EventAttractions");
                });

            modelBuilder.Entity("DAW.Entities.Location", b =>
                {
                    b.Navigation("PublicEvents");
                });

            modelBuilder.Entity("DAW.Entities.PublicEvent", b =>
                {
                    b.Navigation("EventAttractions");
                });
#pragma warning restore 612, 618
        }
    }
}
